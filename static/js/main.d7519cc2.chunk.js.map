{"version":3,"sources":["components/GitHubAuthBtn.js","utils/GitHubUtils.js","components/GitHubAuthForm.js","components/GitHubAuthContainer.js","components/TopNav.js","components/RepoDetailsDesktopLayout.js","components/RepoDetailsMobileLayout.js","components/RepoDetails.js","components/ForecastChooser.js","components/ChartContainer.js","components/StatsTable.js","components/UrlDisplay.js","shared/ClosableBadge.js","components/Footer.js","utils/StargazerStats.js","utils/StargazerLoader.js","components/MainContainer.js","components/MainPage.js","components/RepoPreloader.js","components/App.js","utils/GATrack.js","serviceWorker.js","index.js"],"names":["GitHubAuthBtn","accessToken","storageType","onLoginClick","onLogoutClick","getAccessTokenShortForm","undefined","substring","smallScreen","useMediaQuery","query","Button","variant","onClick","icon","faSignInAlt","className","OverlayTrigger","trigger","placement","overlay","Tooltip","faKey","delay","show","Navbar","Text","faSignOutAlt","storageKey","StorageTypes","GitHubUtils","a","axios","get","this","_prepareRequestHeaders","_setStorageType","setItem","_getStorage","removeItem","ms","Promise","resolve","setTimeout","partialUrl","pageNum","replace","getAccessToken","starData","starCount","page","i","data","length","push","x","starred_at","y","user","repo","handleProgress","shouldStop","_loadStarGazerPage","numOfPages","_getLastStargazerPage","headers","link","isLoggedIn","Error","_addStarData","currentBatchSize","Math","min","all","_range","map","num","pages","response","status","message","getItem","sessionStorage","localStorage","_storage","removeAccessToken","Accept","Authorization","linkHeader","parts","split","section","url","trim","size","startAt","Array","keys","_getStorageDefault","gitHubUtils","Object","freeze","TokenValidationStatus","GitHubAuthForm","handleLoginSuccess","handleClose","useState","tokenValidationStatus","setTokenValidationStatus","inputToken","useRef","storageTypeCheckbox","handleCallback","handleCloseClick","current","useEffect","Modal","onHide","Form","onSubmit","event","preventDefault","validateAndStoreAccessToken","value","checked","then","catch","Header","closeButton","Title","Body","target","rel","href","Group","controlId","Label","Control","ref","type","placeholder","isInvalid","required","Feedback","Check","inline","id","label","Footer","GitHubAuthContainer","showGitHubAuthForm","setShowGitHubAuthForm","setAccessToken","getStorageType","setStorageType","TopNav","bg","Brand","alt","src","window","location","pathname","width","height","packageJson","version","Nav","Link","faGithub","RepoDetailsDesktopLayout","userName","repoName","loadInProgress","handleKeyPress","handlePaste","onStopClick","onGoClick","Row","InputGroup","Prepend","FormControl","aria-label","onKeyPress","onPaste","disabled","Spinner","as","animation","role","aria-hidden","faStopCircle","RepoDetailsMobileLayout","Container","RepoDetails","onRepoDetails","charCode","focus","clipData","gh","clipboardData","getData","protocol","hostname","name","owner","checkBoxDefaultLabel","ForecastChooser","onForecastProps","showModal","setShowModal","checkBoxLabel","setCheckBoxLabel","showAlert","setShowAlert","alertText","setAlertText","forecastBasedOnLastInput","forecastBasedOnLastSelect","forecastForwardInput","forecastForwardSelect","forecastValues","forecastCheckBox","closeModal","calculateDays","input","select","parseInt","monthsAgo","Date","setMonth","getMonth","now","round","abs","custom","onChange","forecastProps","daysBackwards","daysForward","numValues","validateForecastPropsData","checkBoxNewLabel","Col","defaultValue","max","Alert","LINEAR","LOGSCALE","ChartContainer","repos","chartType","onTimeRangeChange","onChartTypeChange","chartSeries","flatMap","username","stargazerData","forecast","series","chartOptions","chart","zoom","autoScaleYaxis","events","zoomed","chartContext","xaxis","yaxis","toolbar","tools","reduce","k","customIcons","faChartLine","html","index","class","title","click","faSuperscript","logarithmic","tooltip","format","stroke","curve","dashArray","colors","color","options","StatsTable","requestToSyncChartTimeRange","repoNameFromData","repoData","Table","bordered","responsive","hover","stats","statName","style","backgroundColor","baseUrl","origin","UrlDisplay","urlInput","readOnly","repoDetails","join","Append","document","execCommand","faCopy","ClosableBadge","text","badgeCookieData","onBadgeClose","Badge","pill","data-testid","borderColor","faTimesCircle","seladbGitHubUser","footerPosition","pageEmpty","sticky","data-size","data-icon","data-show-count","faTwitter","faEnvelope","lsq","require","stargazerStats","dateRange","stargazerDates","cur","minDate","maxDate","filter","firstStarDate","lastStarDate","numOfDays","floor","getTime","daysWithoutStars","maxStarsPerDay","dayWithMostStars","curSameDays","startDate","prevDate","forEach","stargazerDate","curDate","toFixed","toISOString","slice","basedOnLastDays","forecastDaysForward","forecastPoints","setDate","getDate","stargazerFilteredData","leastSquaresFun","mostRecentData","at","delta","daysFromNow","dateFromNow","StargazerLoader","loadStargazers","colorIndex","calcStats","calcForecast","stargazerLoader","MainContainer","preloadedRepos","setRepos","alert","setAlert","isLoading","loadProgress","loadingStatus","setLoadingStatus","setChartType","setForecastProps","onLoadInProgress","progress","requestStopLoading","syncChartTimeRangeWithStats","currentChartTimeRange","closeAlert","getRepoStargazers","find","repoIter","handleRemoveRepo","ProgressBar","animated","getRepoUrl","newTimeRange","reposWithUpdatedStats","reposWithForecast","flag","MainPage","RepoPreloader","reposToPreload","currentlyLoadingIndex","setLoadProgress","finishedLoading","setFinishedLoading","reposLoaded","setReposLoaded","errors","setErrors","repoToPreload","searchParams","URLSearchParams","search","result","key","iter","parseUrlParams","error","App","exact","path","component","ReactGA","initialize","pageview","initializeGoogleAnalytics","Boolean","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7519cc2.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Navbar, OverlayTrigger, Tooltip } from \"react-bootstrap/\";\nimport { useMediaQuery } from \"react-responsive\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSignInAlt,\n  faSignOutAlt,\n  faKey,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function GitHubAuthBtn({\n  accessToken,\n  storageType,\n  onLoginClick,\n  onLogoutClick,\n}) {\n  const getAccessTokenShortForm = () => {\n    const token = accessToken;\n    if (token !== null && token !== undefined) return token.substring(0, 6);\n\n    return \"\";\n  };\n\n  const smallScreen = useMediaQuery({ query: \"(max-width: 650px)\" });\n\n  if (accessToken === null || accessToken === undefined || accessToken === \"\") {\n    return (\n      <Button variant=\"outline-light\" onClick={onLoginClick}>\n        {smallScreen ? (\n          <FontAwesomeIcon icon={faSignInAlt} className=\"mr-1\" />\n        ) : (\n          \"GitHub Authentication\"\n        )}\n      </Button>\n    );\n  } else {\n    return (\n      <div>\n        {smallScreen ? (\n          <OverlayTrigger\n            trigger=\"click\"\n            placement=\"bottom\"\n            overlay={\n              <Tooltip>\n                Access token &apos;{getAccessTokenShortForm()}&apos; stored in{\" \"}\n                {storageType}\n              </Tooltip>\n            }\n          >\n            <Button>\n              <FontAwesomeIcon icon={faKey} className=\"mr-1\" />\n            </Button>\n          </OverlayTrigger>\n        ) : (\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={{ show: 250 }}\n            overlay={<Tooltip>Access token stored in {storageType}</Tooltip>}\n          >\n            <Navbar.Text className=\"mr-2 ml-2\">\n              <FontAwesomeIcon icon={faKey} className=\"mr-1\" />\n              {getAccessTokenShortForm()}\n            </Navbar.Text>\n          </OverlayTrigger>\n        )}\n        <Button variant=\"outline-light\" onClick={onLogoutClick}>\n          {smallScreen ? (\n            <FontAwesomeIcon icon={faSignOutAlt} className=\"mr-1\" />\n          ) : (\n            \"Log Out\"\n          )}\n        </Button>\n      </div>\n    );\n  }\n}\n","import axios from \"axios\";\n\nconst stargazersURL =\n  \"https://api.github.com/repos/{user}/{repo}/stargazers?per_page=100&page={page}\";\nconst validateAccessTokenURL = \"https://api.github.com/user\";\nconst repoUrlTemplate = \"https://github.com/{user}/{repo}\";\n\nconst storageKey = \"statrack_js_access_token\";\n\nconst maxSupportedPagesWithoutAccessToken = 30;\n\nconst batchSize = 5;\n\nexport const StorageTypes = {\n  LocalStorage: \"local storage\",\n  SessionStorage: \"session storage\",\n};\n\nclass GitHubUtils {\n  static _range(size, startAt = 0) {\n    return [...Array(size).keys()].map((i) => i + startAt);\n  }\n\n  static _getStorageDefault() {\n    if (\n      sessionStorage.getItem(storageKey) !== null &&\n      sessionStorage.getItem(storageKey) !== undefined &&\n      sessionStorage.getItem(storageKey) !== \"\"\n    ) {\n      return sessionStorage;\n    } else if (\n      localStorage.getItem(storageKey) !== null &&\n      localStorage.getItem(storageKey) !== undefined &&\n      localStorage.getItem(storageKey) !== \"\"\n    ) {\n      return localStorage;\n    } else {\n      return sessionStorage;\n    }\n  }\n\n  static _storage = GitHubUtils._getStorageDefault();\n\n  async validateAndStoreAccessToken(accessToken, storageType) {\n    await axios.get(\n      validateAccessTokenURL,\n      this._prepareRequestHeaders(accessToken)\n    );\n    this._setStorageType(storageType).setItem(storageKey, accessToken);\n  }\n\n  removeAccessToken() {\n    this._getStorage().removeItem(storageKey);\n  }\n\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  async _loadStarGazerPage(partialUrl, pageNum) {\n    return await axios.get(\n      partialUrl.replace(\"{page}\", pageNum),\n      this._prepareRequestHeaders(this.getAccessToken())\n    );\n  }\n\n  _addStarData(starData, starCount, page) {\n    for (let i = 0; i < page.data.length; i++) {\n      starData.push({\n        x: page.data[i].starred_at,\n        y: starCount++,\n      });\n    }\n\n    return starCount;\n  }\n\n  async loadStargazers(user, repo, handleProgress, shouldStop) {\n    try {\n      const starData = [];\n      let starCount = 1;\n      const partialUrl = stargazersURL\n        .replace(\"{user}\", user)\n        .replace(\"{repo}\", repo);\n\n      handleProgress(0);\n\n      const page = await this._loadStarGazerPage(partialUrl, 1);\n      const numOfPages = this._getLastStargazerPage(page.headers.link);\n      if (\n        numOfPages > maxSupportedPagesWithoutAccessToken &&\n        !this.isLoggedIn()\n      ) {\n        throw Error(\n          \"Cannot load a repo with more than \" +\n            100 * maxSupportedPagesWithoutAccessToken +\n            ' stars without GitHub access token. Please click \"GitHub Authentication\" and provide one'\n        );\n      }\n\n      starCount = this._addStarData(starData, starCount, page);\n\n      handleProgress((1 / numOfPages) * 100);\n      let pageNum = 2;\n      while (pageNum <= numOfPages) {\n        if (shouldStop()) {\n          return null;\n        }\n\n        const currentBatchSize =\n          Math.min(pageNum + batchSize, numOfPages + 1) - pageNum;\n        const pages = await Promise.all(\n          GitHubUtils._range(currentBatchSize, pageNum).map((num) =>\n            this._loadStarGazerPage(partialUrl, num)\n          )\n        );\n        for (let i = 0; i < currentBatchSize; i++) {\n          starCount = this._addStarData(starData, starCount, pages[i]);\n        }\n\n        pageNum += currentBatchSize;\n        handleProgress(((pageNum - 1) / numOfPages) * 100);\n      }\n\n      return starData;\n    } catch (error) {\n      if (error.response === undefined) {\n        throw error;\n      }\n      if (error.response.status === 404) {\n        throw Error(\"Repo \" + user + \"/\" + repo + \" Not found\");\n      } else if (error.response.status === 403) {\n        throw Error(\n          \"API rate limit exceeded!\" +\n            (this.isLoggedIn()\n              ? \"\"\n              : ' Please click \"GitHub Authentication\" and provide GitHub access token to increase rate limit')\n        );\n      } else {\n        throw Error(\n          \"Couldn't fetch stargazers data, error code \" +\n            error.response.status +\n            \" returned\" +\n            (error.response.data.message && error.response.data.message !== \"\"\n              ? \": \" + error.response.data.message\n              : \"\")\n        );\n      }\n    }\n  }\n\n  getAccessToken() {\n    return this._getStorage().getItem(storageKey);\n  }\n\n  isLoggedIn() {\n    const accessToken = this.getAccessToken();\n    return (\n      accessToken !== null && accessToken !== undefined && accessToken !== \"\"\n    );\n  }\n\n  getRepoUrl(user, repo) {\n    return repoUrlTemplate.replace(\"{user}\", user).replace(\"{repo}\", repo);\n  }\n\n  getStorageType() {\n    switch (this._getStorage()) {\n      case sessionStorage:\n        return StorageTypes.SessionStorage;\n      case localStorage:\n        return StorageTypes.LocalStorage;\n      default:\n        return null;\n    }\n  }\n\n  _getStorage() {\n    return GitHubUtils._storage;\n  }\n\n  _setStorageType(storageType) {\n    this.removeAccessToken();\n\n    switch (storageType) {\n      case StorageTypes.LocalStorage:\n        GitHubUtils._storage = localStorage;\n        break;\n      case StorageTypes.SessionStorage:\n        GitHubUtils._storage = sessionStorage;\n        break;\n      default:\n        GitHubUtils._storage = sessionStorage;\n    }\n\n    return GitHubUtils._storage;\n  }\n\n  _prepareRequestHeaders(accessToken) {\n    return {\n      headers: {\n        Accept: \"application/vnd.github.v3.star+json\",\n        ...(accessToken !== undefined &&\n          accessToken !== null &&\n          accessToken !== \"\" && { Authorization: \"token \" + accessToken }),\n      },\n    };\n  }\n\n  _getLastStargazerPage(linkHeader) {\n    if (linkHeader === undefined || linkHeader.length === 0) {\n      return 1;\n    }\n\n    // Split parts by comma\n    const parts = linkHeader.split(\",\");\n\n    // Parse each part into a named link\n    for (const i in parts) {\n      const section = parts[i].split(\";\");\n      if (section.length !== 2) {\n        continue;\n      }\n\n      const url = section[0].replace(/<(.*)>/, \"$1\").trim();\n      const name = section[1].replace(/rel=\"(.*)\"/, \"$1\").trim();\n\n      // if name is 'last' then extract page and return it\n      if (name === \"last\") {\n        return url.replace(/(.*)&page=(.*)/, \"$2\").trim();\n      }\n    }\n  }\n}\n\nconst gitHubUtils = new GitHubUtils();\nObject.freeze(gitHubUtils);\n\nexport default gitHubUtils;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal, Button, Form } from \"react-bootstrap/\";\nimport gitHubUtils, { StorageTypes } from \"../utils/GitHubUtils\";\n\nconst TokenValidationStatus = {\n  Init: \"init\",\n  Valid: \"valid\",\n  Invalid: \"invalid\",\n  DidNotCheck: \"did-not-check\",\n};\n\nexport default function GitHubAuthForm({\n  show,\n  handleLoginSuccess,\n  handleClose,\n}) {\n  const [tokenValidationStatus, setTokenValidationStatus] = useState(\n    TokenValidationStatus.Init\n  );\n\n  const inputToken = useRef();\n  const storageTypeCheckbox = useRef();\n  const handleCallback = useRef();\n\n  const getStorageTypeDecision = () => {\n    if (storageTypeCheckbox.current.checked) {\n      return StorageTypes.LocalStorage;\n    }\n\n    return StorageTypes.SessionStorage;\n  };\n\n  const handleLoginClick = (event) => {\n    event.preventDefault();\n\n    gitHubUtils\n      .validateAndStoreAccessToken(\n        inputToken.current.value,\n        getStorageTypeDecision()\n      )\n      .then(() => {\n        handleCallback.current = handleLoginSuccess;\n        setTokenValidationStatus(TokenValidationStatus.Valid);\n      })\n      .catch(() => {\n        handleCallback.current = null;\n        setTokenValidationStatus(TokenValidationStatus.Invalid);\n      });\n  };\n\n  const handleCloseClick = () => {\n    handleCallback.current = handleClose;\n    setTokenValidationStatus(TokenValidationStatus.DidNotCheck);\n  };\n\n  useEffect(() => {\n    if (\n      handleCallback.current !== null &&\n      handleCallback.current !== undefined\n    ) {\n      handleCallback.current();\n      setTokenValidationStatus(TokenValidationStatus.Init);\n    }\n  }, [tokenValidationStatus]);\n\n  return (\n    <Modal show={show} onHide={handleCloseClick}>\n      <Form onSubmit={handleLoginClick}>\n        <Modal.Header closeButton>\n          <Modal.Title>GitHub Authentication</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>\n            GitHub API{\" \"}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://developer.github.com/v3/#rate-limiting\"\n            >\n              rate limiter\n            </a>{\" \"}\n            makes it impossible to collect stargazer data on repos with more\n            than 3000 stars without GitHub authentication.\n          </p>\n          <p>\n            If you&apos;d like to view stargazer data for this repo, please\n            provide your GitHub auth details.\n          </p>\n          <p>\n            Please note these credentials aren&apos;t stored in any server. This\n            application is based on pure javascript so the credentials are only\n            used to send authenticated requests to GitHub API.\n          </p>\n          <Form.Group controlId=\"githubAuthenticationForm\">\n            <Form.Label>\n              GitHub access token (generate one{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://github.com/settings/tokens\"\n              >\n                here\n              </a>\n              )\n            </Form.Label>\n            <Form.Control\n              ref={inputToken}\n              type=\"text\"\n              placeholder=\"fc516773214acf13d10f856c6b80037999da4fd3\"\n              isInvalid={\n                tokenValidationStatus === TokenValidationStatus.Invalid\n              }\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Access token is invalid.\n            </Form.Control.Feedback>\n            <Form.Text className=\"text-muted\">\n              These credentials aren&apos;t stored in any server.\n            </Form.Text>\n            <Form.Check\n              ref={storageTypeCheckbox}\n              inline\n              type=\"checkbox\"\n              id=\"storageType\"\n              label=\"Save access token in local storage\"\n            />\n            <Form.Label>\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://stackoverflow.com/questions/5523140/html5-local-storage-vs-session-storage\"\n              >\n                Learn more\n              </a>\n            </Form.Label>\n          </Form.Group>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleCloseClick}>\n            Close\n          </Button>\n          <Button variant=\"primary\" type=\"submit\">\n            Login\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal>\n  );\n}\nGitHubAuthForm.propTypes = {\n  show: PropTypes.bool,\n  handleLoginSuccess: PropTypes.func,\n  handleClose: PropTypes.func,\n};\n","import React, { useState } from \"react\";\nimport GitHubAuthBtn from \"./GitHubAuthBtn\";\nimport GitHubAuthForm from \"./GitHubAuthForm\";\nimport gitHubUtils from \"../utils/GitHubUtils\";\n\nexport default function GitHubAuthContainer() {\n  const [showGitHubAuthForm, setShowGitHubAuthForm] = useState(false);\n  const [accessToken, setAccessToken] = useState(gitHubUtils.getAccessToken());\n  const [storageType, setStorageType] = useState(gitHubUtils.getStorageType());\n\n  const openGitHubAuthForm = () => {\n    setShowGitHubAuthForm(true);\n  };\n\n  const hideGitHubAuthForm = () => {\n    setShowGitHubAuthForm(false);\n    setAccessToken(gitHubUtils.getAccessToken());\n    setStorageType(gitHubUtils.getStorageType());\n  };\n\n  const handleLoginSuccess = () => {\n    setShowGitHubAuthForm(false);\n    setAccessToken(gitHubUtils.getAccessToken());\n    setStorageType(gitHubUtils.getStorageType());\n  };\n\n  const handleLogOut = () => {\n    gitHubUtils.removeAccessToken();\n    setAccessToken(gitHubUtils.getAccessToken());\n    setStorageType(gitHubUtils.getStorageType());\n  };\n\n  return (\n    <div>\n      <GitHubAuthBtn\n        onLoginClick={openGitHubAuthForm}\n        onLogoutClick={handleLogOut}\n        accessToken={accessToken}\n        storageType={storageType}\n      />\n      <GitHubAuthForm\n        show={showGitHubAuthForm}\n        handleClose={hideGitHubAuthForm}\n        handleLoginSuccess={handleLoginSuccess}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap/\";\nimport GitHubAuthContainer from \"./GitHubAuthContainer\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport packageJson from \"../../package.json\";\nimport { useMediaQuery } from \"react-responsive\";\n\nconst starTrackGitHubRepo = \"https://github.com/seladb/startrack-js\";\n\nexport default function TopNav() {\n  const smallScreen = useMediaQuery({ query: \"(max-width: 650px)\" });\n\n  return (\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand href=\"#/\">\n        <img\n          alt=\"\"\n          src={window.location.pathname + \"star-icon.png\"}\n          width=\"30\"\n          height=\"30\"\n          className=\"d-inline-block align-top\"\n        />{\" \"}\n        StarTrack v{packageJson.version}\n      </Navbar.Brand>\n      <Nav className=\"mr-auto\" />\n      <Nav>\n        <Nav.Link\n          href={starTrackGitHubRepo}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <FontAwesomeIcon icon={faGithub} className=\"mr-1\" />\n          {!smallScreen ? \"Project On GitHub\" : \"\"}\n        </Nav.Link>\n      </Nav>\n      <GitHubAuthContainer />\n    </Navbar>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./RepoDetailsDesktopLayout.css\";\nimport \"./RepoDetails.css\";\nimport {\n  Row,\n  InputGroup,\n  FormControl,\n  Button,\n  Spinner,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap/\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStopCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function RepoDetailsDesktopLayout({\n  userName,\n  repoName,\n  loadInProgress,\n  handleKeyPress,\n  handlePaste,\n  onStopClick,\n  onGoClick,\n}) {\n  return (\n    <Row>\n      <InputGroup>\n        <InputGroup.Prepend>\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={{ show: 100 }}\n            overlay={\n              <Tooltip>\n                Tip: you can paste any GitHub URL or string in the format of\n                &quot;username/repo&quot;\n              </Tooltip>\n            }\n          >\n            <InputGroup.Text>Repo Details</InputGroup.Text>\n          </OverlayTrigger>\n        </InputGroup.Prepend>\n        <FormControl\n          ref={userName}\n          placeholder=\"Username\"\n          aria-label=\"Username\"\n          onKeyPress={handleKeyPress}\n          onPaste={handlePaste}\n        />\n        <InputGroup.Prepend>\n          <InputGroup.Text>/</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          ref={repoName}\n          placeholder=\"Repo name\"\n          aria-label=\"Repo name\"\n          onKeyPress={handleKeyPress}\n          onPaste={handlePaste}\n        />\n        {!loadInProgress ? (\n          <Button\n            className=\"RepoDetailsDesktopLayout-goButton\"\n            type=\"button\"\n            onClick={onGoClick}\n          >\n            Go!\n          </Button>\n        ) : (\n          <div>\n            <Button\n              className=\"RepoDetailsDesktopLayout-loadingButton\"\n              type=\"button\"\n              disabled\n            >\n              <Spinner\n                as=\"span\"\n                animation=\"border\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              />{\" \"}\n              Loading...\n            </Button>\n            <Button className=\"RepoDetails-stopButton\" onClick={onStopClick}>\n              <FontAwesomeIcon icon={faStopCircle} />\n            </Button>\n          </div>\n        )}\n      </InputGroup>\n    </Row>\n  );\n}\nRepoDetailsDesktopLayout.propTypes = {\n  userName: PropTypes.string,\n  repoName: PropTypes.string,\n  loadInProgress: PropTypes.bool,\n  handleKeyPress: PropTypes.func,\n  handlePaste: PropTypes.func,\n  onStopClick: PropTypes.func,\n  onGoClick: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./RepoDetailsMobileLayout.css\";\nimport \"./RepoDetails.css\";\nimport {\n  Row,\n  FormControl,\n  Button,\n  Spinner,\n  Container,\n  Form,\n} from \"react-bootstrap/\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStopCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function RepoDetailsMobileLayout({\n  userName,\n  repoName,\n  loadInProgress,\n  handleKeyPress,\n  handlePaste,\n  onStopClick,\n  onGoClick,\n}) {\n  return (\n    <Container>\n      <Row>\n        <Form.Label className=\"RepoDetailsMobileLayout-headline\">\n          Repo Details\n        </Form.Label>\n      </Row>\n      <Row>\n        <FormControl\n          ref={userName}\n          placeholder=\"Username\"\n          aria-label=\"Username\"\n          onKeyPress={handleKeyPress}\n          onPaste={handlePaste}\n        />\n      </Row>\n      <Row>\n        <FormControl\n          ref={repoName}\n          placeholder=\"Repo name\"\n          aria-label=\"Repo name\"\n          onKeyPress={handleKeyPress}\n          onPaste={handlePaste}\n        />\n      </Row>\n      <Row>\n        {!loadInProgress ? (\n          <Button\n            className=\"RepoDetailsMobileLayout-goButton\"\n            type=\"button\"\n            onClick={onGoClick}\n          >\n            Go!\n          </Button>\n        ) : (\n          <div className=\"RepoDetailsMobileLayout-loadingDiv\">\n            <Button\n              className=\"RepoDetailsMobileLayout-loadingButton\"\n              type=\"button\"\n              disabled\n            >\n              <Spinner\n                as=\"span\"\n                animation=\"border\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              />{\" \"}\n              Loading...\n            </Button>\n            <Button className=\"RepoDetails-stopButton\" onClick={onStopClick}>\n              <FontAwesomeIcon icon={faStopCircle} />\n            </Button>\n          </div>\n        )}\n      </Row>\n    </Container>\n  );\n}\nRepoDetailsMobileLayout.propTypes = {\n  userName: PropTypes.string,\n  repoName: PropTypes.string,\n  loadInProgress: PropTypes.bool,\n  handleKeyPress: PropTypes.func,\n  handlePaste: PropTypes.func,\n  onStopClick: PropTypes.func,\n  onGoClick: PropTypes.func,\n};\n","import React, { useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./RepoDetails.css\";\nimport RepoDetailsDesktopLayout from \"./RepoDetailsDesktopLayout\";\nimport RepoDetailsMobileLayout from \"./RepoDetailsMobileLayout\";\nimport { useMediaQuery } from \"react-responsive\";\nimport { Container } from \"react-bootstrap/\";\nimport gh from \"parse-github-url\";\n\nexport default function RepoDetails({\n  loadInProgress,\n  onStopClick,\n  onRepoDetails,\n}) {\n  const repoName = useRef();\n  const userName = useRef();\n\n  const onGoClick = () => {\n    onRepoDetails(userName.current.value.trim(), repoName.current.value.trim());\n  };\n\n  const handleKeyPress = (target) => {\n    if (target.charCode === 13 && !loadInProgress) {\n      onGoClick();\n    }\n\n    if (target.charCode === 47) {\n      target.preventDefault();\n      repoName.current.focus();\n    }\n  };\n\n  const handlePaste = (event) => {\n    const clipData = gh(event.clipboardData.getData(\"Text\"));\n    if (!clipData) {\n      return;\n    }\n\n    if (\n      (clipData.protocol === \"https:\" &&\n        clipData.hostname === \"github.com\" &&\n        clipData.name !== null &&\n        clipData.owner !== null) ||\n      (clipData.protocol === null &&\n        clipData.hostname === null &&\n        clipData.name !== null &&\n        clipData.owner !== null)\n    ) {\n      event.preventDefault();\n      userName.current.value = clipData.owner;\n      repoName.current.value = clipData.name;\n    }\n  };\n\n  const smallScreen = useMediaQuery({ query: \"(max-width: 520px)\" });\n\n  return (\n    <Container className=\"RepoDetails-container\">\n      {smallScreen ? (\n        <RepoDetailsMobileLayout\n          userName={userName}\n          repoName={repoName}\n          onGoClick={onGoClick}\n          handleKeyPress={handleKeyPress}\n          handlePaste={handlePaste}\n          loadInProgress={loadInProgress}\n          onStopClick={onStopClick}\n        />\n      ) : (\n        <RepoDetailsDesktopLayout\n          userName={userName}\n          repoName={repoName}\n          onGoClick={onGoClick}\n          handleKeyPress={handleKeyPress}\n          handlePaste={handlePaste}\n          loadInProgress={loadInProgress}\n          onStopClick={onStopClick}\n        />\n      )}\n    </Container>\n  );\n}\nRepoDetails.propTypes = {\n  loadInProgress: PropTypes.bool,\n  onStopClick: PropTypes.func,\n  onRepoDetails: PropTypes.func,\n};\n","import React, { useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Modal, Container, Button, Col, Alert } from \"react-bootstrap/\";\n\nconst checkBoxDefaultLabel = \"Display forecast\";\nconst minForecastBackwardsDays = 10;\nconst minForecastForwardDays = 10;\nconst maxForecastForwardDays = 365 * 10;\n\nexport default function ForecastChooser({ onForecastProps }) {\n  const [showModal, setShowModal] = useState(false);\n  const [checkBoxLabel, setCheckBoxLabel] = useState(checkBoxDefaultLabel);\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertText, setAlertText] = useState(\"\");\n\n  const forecastBasedOnLastInput = useRef();\n  const forecastBasedOnLastSelect = useRef();\n  const forecastForwardInput = useRef();\n  const forecastForwardSelect = useRef();\n  const forecastValues = useRef();\n  const forecastCheckBox = useRef();\n\n  const onForecastCheckBoxChanged = (event) => {\n    if (event.target.checked) {\n      setShowModal(true);\n      setShowAlert(false);\n    } else {\n      setCheckBoxLabel(checkBoxDefaultLabel);\n      onForecastProps(null);\n    }\n  };\n\n  const closeModal = () => {\n    setShowModal(false);\n    setCheckBoxLabel(checkBoxDefaultLabel);\n    forecastCheckBox.current.checked = false;\n    onForecastProps(null);\n    setShowAlert(false);\n  };\n\n  const calculateDays = (input, select) => {\n    switch (select) {\n      case \"Days\":\n        return parseInt(input);\n      case \"Weeks\":\n        return input * 7;\n      case \"Months\": {\n        const monthsAgo = new Date();\n        monthsAgo.setMonth(monthsAgo.getMonth() - input);\n        const now = new Date();\n        const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n        return Math.round(Math.abs((now - monthsAgo) / oneDay));\n      }\n      case \"Years\":\n        return input * 365;\n      default:\n        return parseInt(input);\n    }\n  };\n\n  const validateForecastPropsData = (forecastProps) => {\n    if (forecastProps.daysBackwards < minForecastBackwardsDays) {\n      setShowAlert(true);\n      setAlertText(\"The forecast must be based on at least 10 days of data\");\n      return false;\n    }\n    if (forecastProps.daysForward < minForecastForwardDays) {\n      setShowAlert(true);\n      setAlertText(\"The forecast must show at least 10 days forward\");\n      return false;\n    }\n    if (forecastProps.daysForward > maxForecastForwardDays) {\n      setShowAlert(true);\n      setAlertText(\"The forecast cannot show more than 10 years forward\");\n      return false;\n    }\n\n    return true;\n  };\n\n  const forecastPropsSelected = (event) => {\n    event.preventDefault();\n    const forecastProps = {\n      daysBackwards: calculateDays(\n        forecastBasedOnLastInput.current.value,\n        forecastBasedOnLastSelect.current.value\n      ),\n      daysForward: calculateDays(\n        forecastForwardInput.current.value,\n        forecastForwardSelect.current.value\n      ),\n      numValues: parseInt(forecastValues.current.value),\n    };\n    if (!validateForecastPropsData(forecastProps)) {\n      return;\n    }\n\n    const checkBoxNewLabel = `Display ${forecastForwardInput.current.value} ${forecastForwardSelect.current.value} forecast based on the last ${forecastBasedOnLastInput.current.value} ${forecastBasedOnLastSelect.current.value}`;\n    setCheckBoxLabel(checkBoxNewLabel);\n    setShowModal(false);\n    onForecastProps(forecastProps);\n  };\n\n  return (\n    <Container>\n      <Form>\n        <h3>Forecast</h3>\n        <Form.Check\n          custom\n          type=\"checkbox\"\n          ref={forecastCheckBox}\n          id=\"display-forecast-checkbox\"\n          label={checkBoxLabel}\n          onChange={onForecastCheckBoxChanged}\n        />\n      </Form>\n      <Modal show={showModal} onHide={closeModal}>\n        <Form onSubmit={forecastPropsSelected}>\n          <Modal.Header closeButton>\n            <Modal.Title>Forecast Properties</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form.Group>\n              <Form.Label>Display forecast based on the last:</Form.Label>\n              <Form.Row>\n                <Col>\n                  <Form.Control\n                    ref={forecastBasedOnLastInput}\n                    type=\"number\"\n                    min=\"1\"\n                    defaultValue=\"3\"\n                    required\n                  />\n                </Col>\n                <Col>\n                  <Form.Control\n                    ref={forecastBasedOnLastSelect}\n                    as=\"select\"\n                    defaultValue=\"Months\"\n                  >\n                    <option>Days</option>\n                    <option>Weeks</option>\n                    <option>Months</option>\n                    <option>Years</option>\n                  </Form.Control>\n                </Col>\n              </Form.Row>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Display forecast ahead:</Form.Label>\n              <Form.Row>\n                <Col>\n                  <Form.Control\n                    ref={forecastForwardInput}\n                    type=\"number\"\n                    min=\"1\"\n                    defaultValue=\"3\"\n                    required\n                  />\n                </Col>\n                <Col>\n                  <Form.Control\n                    ref={forecastForwardSelect}\n                    as=\"select\"\n                    defaultValue=\"Months\"\n                  >\n                    <option>Days</option>\n                    <option>Weeks</option>\n                    <option>Months</option>\n                    <option>Years</option>\n                  </Form.Control>\n                </Col>\n              </Form.Row>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Number of forecast values to calculate:</Form.Label>\n              <Form.Control\n                ref={forecastValues}\n                type=\"number\"\n                min=\"10\"\n                max=\"100\"\n                defaultValue=\"10\"\n                required\n              />\n            </Form.Group>\n            <p>\n              The forecast is based on{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://en.wikipedia.org/wiki/Linear_least_squares\"\n              >\n                Linear Least Squares\n              </a>{\" \"}\n              which creates a regression line from the existing stargazer data\n              and extends this line into the future\n            </p>\n            <Form.Group>\n              <Alert variant=\"danger\" show={showAlert}>\n                {alertText}\n              </Alert>\n            </Form.Group>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={closeModal}>\n              Close\n            </Button>\n            <Button variant=\"primary\" type=\"submit\">\n              Ok\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n    </Container>\n  );\n}\nForecastChooser.propTypes = {\n  onForecastProps: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Container } from \"react-bootstrap/\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { icon } from \"@fortawesome/fontawesome-svg-core\";\nimport { faChartLine, faSuperscript } from \"@fortawesome/free-solid-svg-icons\";\n\nexport const LINEAR = \"linear\";\nexport const LOGSCALE = \"logscale\";\n\nexport default function ChartContainer({\n  repos,\n  chartType,\n  onTimeRangeChange,\n  onChartTypeChange,\n}) {\n  const chartSeries = repos.flatMap(\n    ({ username, repo, stargazerData, forecast }) => {\n      const series = [\n        {\n          name: username + \"/\" + repo,\n          data: stargazerData,\n        },\n      ];\n      if (forecast !== null) {\n        series.push({\n          name: username + \"/\" + repo + \" (forecast)\",\n          data: forecast,\n        });\n      }\n      return series;\n    }\n  );\n\n  const onZoom = (chartContext, { xaxis, yaxis }) => {\n    if (onTimeRangeChange) {\n      onTimeRangeChange(xaxis);\n    }\n  };\n\n  const chartOptions = {\n    chart: {\n      id: \"stargazers\",\n      zoom: {\n        autoScaleYaxis: repos.length <= 1,\n      },\n      events: {\n        zoomed: onZoom,\n      },\n      toolbar: {\n        tools: {\n          // disable zoom and pan tools in log mode, see\n          // https://github.com/seladb/StarTrack-js/issues/15#issuecomment-646945288\n          ...[\"zoom\", \"zoomin\", \"zoomout\", \"pan\", \"reset\"].reduce((a, k) => {\n            a[k] = chartType === LINEAR;\n            return a;\n          }, {}),\n          customIcons: [\n            {\n              icon: icon(faChartLine).html,\n              index: -2,\n              class: `chart-fa-icon mr-1 ml-3 ${\n                chartType === LINEAR ? \"text-primary\" : \"\"\n              }`,\n              title: \"Use linear scale\",\n              click() {\n                onChartTypeChange(LINEAR);\n              },\n            },\n            {\n              icon: icon(faSuperscript).html,\n              index: -1,\n              class: `chart-fa-icon mr-2 ${\n                chartType === LOGSCALE ? \"text-primary\" : \"\"\n              }`,\n              title: \"Use logarithmic scale\",\n              click() {\n                onChartTypeChange(LOGSCALE);\n              },\n            },\n          ],\n        },\n      },\n    },\n    yaxis: {\n      logarithmic: chartType === LOGSCALE,\n    },\n    xaxis: {\n      type: \"datetime\",\n    },\n    tooltip: {\n      x: {\n        format: \"dd MMM yyyy\",\n      },\n    },\n    stroke: {\n      curve: \"straight\",\n      dashArray: repos.flatMap(({ forecast }) => {\n        return forecast !== null ? [0, 5] : [0];\n      }),\n    },\n    colors: repos.flatMap(({ color, forecast }) => {\n      return forecast !== null ? [color, color] : [color];\n    }),\n  };\n\n  return (\n    <Container className=\"mt-5\">\n      <ReactApexChart options={chartOptions} series={chartSeries} type=\"line\" />\n    </Container>\n  );\n}\nChartContainer.propTypes = {\n  repos: PropTypes.array,\n  onTimeRangeChange: PropTypes.func,\n  onChartTypeChange: PropTypes.func,\n  chartType: PropTypes.string,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Table, Container, Form } from \"react-bootstrap/\";\nimport \"./StatsTable.css\";\n\nexport default function StatsTable({ repos, requestToSyncChartTimeRange }) {\n  const onSyncCheckBoxChanged = (event) => {\n    if (requestToSyncChartTimeRange) {\n      requestToSyncChartTimeRange(event.target.checked);\n    }\n  };\n\n  const repoNameFromData = (repoData) => {\n    return repoData.username + \" / \" + repoData.repo;\n  };\n\n  return (\n    <Container className=\"StatsTable-topContainer\">\n      <h3>Repo stats</h3>\n      <Form className=\"mb-3\">\n        <Form.Check\n          type=\"checkbox\"\n          label=\"Sync stats to chart zoom level\"\n          onChange={onSyncCheckBoxChanged}\n        />\n      </Form>\n      <Table bordered responsive hover>\n        <thead>\n          <tr className=\"StatsTable-header\">\n            <th />\n            {Object.keys(repos[0].stats).map((statName) => (\n              <th key={statName}>{statName}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {repos.map((repoData) => (\n            <tr\n              className=\"StatsTable-row\"\n              style={{ backgroundColor: repoData.color }}\n              key={repoNameFromData(repoData)}\n            >\n              <th>{repoNameFromData(repoData)}</th>\n              {Object.keys(repoData.stats).map((statName) => (\n                <td key={statName}>{repoData.stats[statName]}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Container>\n  );\n}\nStatsTable.propTypes = {\n  repos: PropTypes.array,\n  requestToSyncChartTimeRange: PropTypes.func,\n};\n","import React, { useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  InputGroup,\n  FormControl,\n  Button,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap/\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCopy } from \"@fortawesome/free-solid-svg-icons\";\n\nconst repoUrlParam = \"r={user},{repo}\";\nconst baseUrl =\n  window.location.origin + window.location.pathname + \"#/preload?\";\n\nexport default function UrlDisplay({ repos }) {\n  const urlInput = useRef();\n\n  const buildURL = () => {\n    if (repos === undefined || repos === null || repos.length === 0) {\n      return \"\";\n    }\n\n    return (\n      baseUrl +\n      repos\n        .map((repoDetails) =>\n          repoUrlParam\n            .replace(\"{user}\", repoDetails.username)\n            .replace(\"{repo}\", repoDetails.repo)\n        )\n        .join(\"&\")\n    );\n  };\n\n  const copyToClipboard = () => {\n    urlInput.current.select();\n    document.execCommand(\"copy\");\n  };\n\n  return (\n    <InputGroup className=\"mb-3 mt-5\">\n      <InputGroup.Prepend>\n        <InputGroup.Text id=\"url\">URL</InputGroup.Text>\n      </InputGroup.Prepend>\n      <FormControl\n        readOnly\n        aria-label=\"URL\"\n        value={buildURL()}\n        ref={urlInput}\n      />\n      <InputGroup.Append>\n        <OverlayTrigger\n          placement=\"right\"\n          delay={{ show: 250 }}\n          overlay={<Tooltip>Copy URL</Tooltip>}\n        >\n          <Button variant=\"outline-secondary\" onClick={copyToClipboard}>\n            <FontAwesomeIcon icon={faCopy} />\n          </Button>\n        </OverlayTrigger>\n      </InputGroup.Append>\n    </InputGroup>\n  );\n}\nUrlDisplay.propTypes = {\n  repos: PropTypes.array,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { Badge, Button } from \"react-bootstrap/\";\nimport \"./ClosableBadge.css\";\n\nexport default function ClosableBadge({\n  href,\n  text,\n  color,\n  badgeCookieData,\n  onBadgeClose,\n}) {\n  const handleBadgeClose = () => {\n    onBadgeClose(badgeCookieData);\n  };\n\n  return (\n    <h5>\n      <Badge pill variant=\"primary\" style={{ backgroundColor: color }}>\n        {href !== undefined && href !== null ? (\n          <a\n            className=\"ClosableBadge-Link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={href}\n          >\n            {text}\n          </a>\n        ) : (\n          text\n        )}\n        <Button\n          data-testid=\"close-button\"\n          size=\"sm\"\n          onClick={handleBadgeClose}\n          style={{ backgroundColor: color, borderColor: color }}\n        >\n          <FontAwesomeIcon icon={faTimesCircle} />\n        </Button>\n      </Badge>\n    </h5>\n  );\n}\nClosableBadge.propTypes = {\n  href: PropTypes.string,\n  text: PropTypes.string,\n  color: PropTypes.string,\n  badgeCookieData: PropTypes.object,\n  onBadgeClose: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Navbar, Nav } from \"react-bootstrap/\";\nimport GitHubButton from \"react-github-btn\";\nimport { useMediaQuery } from \"react-responsive\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub, faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faEnvelope } from \"@fortawesome/free-solid-svg-icons\";\n\nconst starTrackGitHubRepo = \"https://github.com/seladb/startrack-js\";\nconst seladbGitHubUser = \"https://github.com/seladb\";\nconst seladbTwitter = \"https://twitter.com/seladb\";\nconst seladbEmail = \"mailto:pcapplusplus@gmail.com\";\n\nexport default function Footer({ pageEmpty }) {\n  const footerPosition = pageEmpty ? \"fixed-bottom\" : \"\";\n\n  const smallScreen = useMediaQuery({ query: \"(max-width: 530px)\" });\n\n  return (\n    <Navbar bg=\"light\" sticky=\"bottom\" className={footerPosition}>\n      {!smallScreen ? (\n        <Navbar.Text className=\"mr-2\">Created by</Navbar.Text>\n      ) : (\n        \"\"\n      )}\n      <GitHubButton\n        href={seladbGitHubUser}\n        data-size=\"large\"\n        aria-label=\"@seladb\"\n      >\n        @seladb\n      </GitHubButton>\n      {!smallScreen ? (\n        <Navbar.Text className=\"ml-2 mr-2\">Give us a star:</Navbar.Text>\n      ) : (\n        <Navbar.Text className=\"ml-2 mr-2\"></Navbar.Text>\n      )}\n      <GitHubButton\n        href={starTrackGitHubRepo}\n        data-icon=\"octicon-star\"\n        data-size=\"large\"\n        data-show-count=\"true\"\n        aria-label=\"Star StarTrack on GitHub\"\n      >\n        Star\n      </GitHubButton>\n      <Nav className=\"mr-auto\" />\n      <Nav>\n        <Nav.Link\n          href={seladbGitHubUser}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <FontAwesomeIcon icon={faGithub} className=\"mr-1\" />\n        </Nav.Link>\n        <Nav.Link\n          href={seladbTwitter}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <FontAwesomeIcon icon={faTwitter} className=\"mr-1\" />\n        </Nav.Link>\n        <Nav.Link href={seladbEmail} target=\"_blank\" rel=\"noopener noreferrer\">\n          <FontAwesomeIcon icon={faEnvelope} className=\"mr-1\" />\n        </Nav.Link>\n      </Nav>\n    </Navbar>\n  );\n}\nFooter.propTypes = {\n  pageEmpty: PropTypes.bool,\n};\n","const lsq = require(\"least-squares\");\n\nclass StargazerStats {\n  calcStats(stargazerData, dateRange) {\n    let stargazerDates = stargazerData.map((cur) => new Date(cur.x));\n    if (\n      dateRange &&\n      dateRange.min !== undefined &&\n      dateRange.max !== undefined\n    ) {\n      const minDate = new Date(dateRange.min);\n      const maxDate = new Date(dateRange.max);\n      stargazerDates = stargazerDates.filter(\n        (cur) => cur >= minDate && cur <= maxDate\n      );\n    }\n\n    if (stargazerDates.length === 0) {\n      return {\n        \"Number of stars\": 0,\n        \"Number of days\": 0,\n        \"Average stars per day\": 0,\n        \"Average days per star\": 0,\n        \"Days with stars\": 0,\n        \"Max stars in one day\": 0,\n        \"Day with most stars\": 0,\n      };\n    }\n\n    const firstStarDate = stargazerDates[0];\n    const lastStarDate = stargazerDates[stargazerDates.length - 1];\n    const numOfDays =\n      stargazerDates.length === 1\n        ? 1\n        : Math.floor(\n            (lastStarDate.getTime() - firstStarDate.getTime()) /\n              1000 /\n              60 /\n              60 /\n              24\n          );\n    let daysWithoutStars = 0;\n    let maxStarsPerDay = 0;\n    let dayWithMostStars = stargazerDates[0];\n    let curSameDays = 1;\n    const startDate = Math.floor(stargazerDates[0] / 1000 / 60 / 60 / 24 - 1);\n    let prevDate = startDate;\n    stargazerDates.forEach((stargazerDate) => {\n      const curDate = Math.floor(stargazerDate / 1000 / 60 / 60 / 24);\n\n      if (curDate === prevDate) {\n        curSameDays += 1;\n      } else {\n        if (prevDate !== startDate) {\n          daysWithoutStars += curDate - prevDate - 1;\n        }\n\n        if (curSameDays > maxStarsPerDay) {\n          maxStarsPerDay = curSameDays;\n          dayWithMostStars = new Date(prevDate * 1000 * 60 * 60 * 24);\n        }\n\n        curSameDays = 1;\n      }\n\n      prevDate = curDate;\n    });\n\n    return {\n      \"Number of stars\": stargazerDates.length,\n      \"Number of days\": numOfDays,\n      \"Average stars per day\": (stargazerDates.length / numOfDays).toFixed(3),\n      \"Average days per star\": (numOfDays / stargazerDates.length).toFixed(3),\n      \"Days with stars\": numOfDays - daysWithoutStars,\n      \"Max stars in one day\": maxStarsPerDay,\n      \"Day with most stars\": dayWithMostStars.toISOString().slice(0, 10),\n    };\n  }\n\n  calcForecast(\n    stargazerData,\n    basedOnLastDays,\n    forecastDaysForward,\n    forecastPoints\n  ) {\n    const minDate = new Date();\n    minDate.setDate(minDate.getDate() - basedOnLastDays);\n    const stargazerFilteredData = stargazerData\n      .filter((cur) => new Date(cur.x) >= minDate)\n      .map((cur) => ({ x: new Date(cur.x).getTime(), y: cur.y }));\n    if (stargazerFilteredData.length <= 1) {\n      return null;\n    }\n    const ret = {};\n    const leastSquaresFun = lsq(\n      stargazerFilteredData.map((cur) => cur.x),\n      stargazerFilteredData.map((cur) => cur.y),\n      ret\n    );\n\n    // This makes sure the forecast starts from the recent star count\n    const mostRecentData = stargazerFilteredData.at(-1);\n    const delta =\n      mostRecentData.y - Math.round(leastSquaresFun(mostRecentData.x));\n\n    const forecastData = [...Array(forecastPoints + 1).keys()]\n      .map((i) => (forecastDaysForward * i) / forecastPoints)\n      .map((daysFromNow) => {\n        const dateFromNow = new Date();\n        dateFromNow.setDate(dateFromNow.getDate() + daysFromNow);\n        return {\n          x: dateFromNow.toISOString(),\n          y: Math.round(delta + leastSquaresFun(dateFromNow.getTime())),\n        };\n      });\n    return forecastData;\n  }\n}\n\nconst stargazerStats = new StargazerStats();\nObject.freeze(stargazerStats);\n\nexport default stargazerStats;\n","import gitHubUtils from \"./GitHubUtils\";\nimport stargazerStats from \"./StargazerStats\";\n\nconst colors = [\n  \"#008FFB\",\n  \"#00E396\",\n  \"#FEB019\",\n  \"#FF4560\",\n  \"#775DD0\",\n  \"#F86624\",\n  \"#00B1F2\",\n  \"#5A2A27\",\n];\n\nexport const maxReposAllowed = 8;\n\nclass StargazerLoader {\n  static colorIndex = -1;\n\n  async loadStargazers(\n    username,\n    repo,\n    forecastProps,\n    handleProgress,\n    shouldStop\n  ) {\n    const stargazerData = await gitHubUtils.loadStargazers(\n      username,\n      repo,\n      handleProgress,\n      shouldStop\n    );\n    if (stargazerData === null) {\n      return null;\n    }\n    StargazerLoader.colorIndex =\n      StargazerLoader.colorIndex + 1 === colors.length\n        ? 0\n        : StargazerLoader.colorIndex + 1;\n    return {\n      username: username,\n      repo: repo,\n      color: colors[StargazerLoader.colorIndex],\n      stargazerData: stargazerData,\n      stats: stargazerStats.calcStats(stargazerData),\n      forecast:\n        forecastProps !== null\n          ? stargazerStats.calcForecast(\n              stargazerData,\n              forecastProps.daysBackwards,\n              forecastProps.daysForward,\n              forecastProps.numValues\n            )\n          : null,\n    };\n  }\n}\n\nconst stargazerLoader = new StargazerLoader();\nObject.freeze(stargazerLoader);\n\nexport default stargazerLoader;\n","import React, { useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, ProgressBar, Container } from \"react-bootstrap/\";\nimport \"./MainContainer.css\";\nimport RepoDetails from \"./RepoDetails\";\nimport ForecastChooser from \"./ForecastChooser\";\nimport ChartContainer, { LINEAR } from \"./ChartContainer\";\nimport StatsTable from \"./StatsTable\";\nimport UrlDisplay from \"./UrlDisplay\";\nimport ClosableBadge from \"../shared/ClosableBadge\";\nimport Footer from \"./Footer\";\nimport stargazerLoader, { maxReposAllowed } from \"../utils/StargazerLoader\";\nimport stargazerStats from \"./../utils/StargazerStats\";\nimport gitHubUtils from \"../utils/GitHubUtils\";\n\nexport default function MainContainer({ preloadedRepos }) {\n  const [repos, setRepos] = useState(preloadedRepos || []);\n\n  const [alert, setAlert] = useState({\n    show: false,\n    title: \"\",\n    message: \"\",\n  });\n\n  const [loadingStatus, setLoadingStatus] = useState({\n    isLoading: false,\n    loadProgress: 0,\n  });\n\n  const [chartType, setChartType] = useState(LINEAR);\n\n  const [forecastProps, setForecastProps] = useState(null);\n\n  const onLoadInProgress = (progress) => {\n    setLoadingStatus({\n      isLoading: true,\n      loadProgress: progress,\n    });\n  };\n\n  const requestStopLoading = useRef();\n  const syncChartTimeRangeWithStats = useRef(false);\n  const currentChartTimeRange = useRef(null);\n\n  const showAlert = (title, message) => {\n    setAlert({\n      show: true,\n      title: title,\n      message: message,\n    });\n  };\n\n  const closeAlert = () => {\n    setAlert({\n      show: false,\n      title: \"\",\n      message: \"\",\n    });\n  };\n\n  const getRepoStargazers = async (username, repo) => {\n    if (!username || username === \"\" || !repo || repo === \"\") {\n      showAlert(\n        \"Missing details\",\n        \"Please provide both Username and Repo name\"\n      );\n      return;\n    }\n\n    if (\n      repos.find(\n        (repoIter) => repoIter.username === username && repoIter.repo === repo\n      ) !== undefined\n    ) {\n      showAlert(\"Repo exists\", \"Repo already exists\");\n      return;\n    }\n\n    if (repos.length + 1 > maxReposAllowed) {\n      showAlert(\n        \"Reached max number of repos allowed\",\n        \"Maximum repos that can be shown at the same time is \" + maxReposAllowed\n      );\n      return;\n    }\n\n    requestStopLoading.current = false;\n\n    try {\n      const stargazerData = await stargazerLoader.loadStargazers(\n        username,\n        repo,\n        forecastProps,\n        onLoadInProgress,\n        () => requestStopLoading.current\n      );\n\n      if (stargazerData !== null) {\n        setRepos([...repos, stargazerData]);\n      }\n\n      setLoadingStatus({\n        isLoading: false,\n        loadProgress: 0,\n      });\n    } catch (error) {\n      showAlert(\"Error loading stargazers\", error.message);\n      setLoadingStatus({\n        isLoading: false,\n        loadProgress: 0,\n      });\n    }\n\n    requestStopLoading.current = false;\n  };\n\n  const handleStopLoading = () => {\n    requestStopLoading.current = true;\n  };\n\n  const handleRemoveRepo = (repoDetails) => {\n    // if this is the last repo, cleanup forecast\n    if (repos.length === 1) {\n      setForecastProps(null);\n    }\n\n    setRepos(\n      repos.filter((repo) => {\n        return (\n          repo.username !== repoDetails.username ||\n          repo.repo !== repoDetails.repo\n        );\n      })\n    );\n  };\n\n  const handleChartTimeRangeChange = (newTimeRange) => {\n    currentChartTimeRange.current = newTimeRange;\n    if (syncChartTimeRangeWithStats.current) {\n      const reposWithUpdatedStats = repos.slice();\n      for (let index = 0; index < reposWithUpdatedStats.length; index++) {\n        reposWithUpdatedStats[index].stats = stargazerStats.calcStats(\n          reposWithUpdatedStats[index].stargazerData,\n          syncChartTimeRangeWithStats.current\n            ? currentChartTimeRange.current\n            : null\n        );\n      }\n\n      setRepos(reposWithUpdatedStats);\n    }\n  };\n\n  const handleRequestToSyncChartTimeRange = (flag) => {\n    syncChartTimeRangeWithStats.current = flag;\n    const reposWithUpdatedStats = repos.slice();\n    for (let index = 0; index < reposWithUpdatedStats.length; index++) {\n      reposWithUpdatedStats[index].stats = stargazerStats.calcStats(\n        reposWithUpdatedStats[index].stargazerData,\n        flag ? currentChartTimeRange.current : null\n      );\n    }\n\n    setRepos(reposWithUpdatedStats);\n  };\n\n  const handleForecastProps = (forecastProps) => {\n    const reposWithForecast = repos.slice();\n    for (let index = 0; index < reposWithForecast.length; index++) {\n      reposWithForecast[index].forecast =\n        forecastProps === null\n          ? null\n          : stargazerStats.calcForecast(\n              reposWithForecast[index].stargazerData,\n              forecastProps.daysBackwards,\n              forecastProps.daysForward,\n              forecastProps.numValues\n            );\n    }\n\n    setRepos(reposWithForecast);\n    setForecastProps(forecastProps);\n  };\n\n  return (\n    <div>\n      {loadingStatus.isLoading ? (\n        <ProgressBar\n          now={loadingStatus.loadProgress}\n          variant=\"success\"\n          animated\n        />\n      ) : (\n        <div className=\"progress MainContainer-progressBarPlaceholder\" />\n      )}\n      <RepoDetails\n        onRepoDetails={getRepoStargazers}\n        loadInProgress={loadingStatus.isLoading}\n        onStopClick={handleStopLoading}\n      />\n      <Container>\n        <div className=\"MainContainer-closableBadgesWrapper\">\n          {repos.map((repoData) => (\n            <div\n              className=\"MainContainer-closableBadgeContainer\"\n              key={repoData.username + \"/\" + repoData.repo}\n            >\n              <ClosableBadge\n                text={repoData.username + \"/\" + repoData.repo}\n                badgeCookieData={{\n                  username: repoData.username,\n                  repo: repoData.repo,\n                }}\n                onBadgeClose={handleRemoveRepo}\n                color={repoData.color}\n                href={gitHubUtils.getRepoUrl(repoData.username, repoData.repo)}\n              />\n            </div>\n          ))}\n        </div>\n      </Container>\n      {repos.length > 0 ? (\n        <ChartContainer\n          repos={repos}\n          onTimeRangeChange={handleChartTimeRangeChange}\n          chartType={chartType}\n          onChartTypeChange={setChartType}\n        />\n      ) : null}\n      {repos.length > 0 ? (\n        <ForecastChooser onForecastProps={handleForecastProps} />\n      ) : null}\n      {repos.length > 0 ? (\n        <Container>\n          <StatsTable\n            repos={repos}\n            requestToSyncChartTimeRange={handleRequestToSyncChartTimeRange}\n          />\n        </Container>\n      ) : null}\n      {repos.length > 0 ? (\n        <Container>\n          <UrlDisplay repos={repos} />\n        </Container>\n      ) : null}\n      <Footer pageEmpty={repos.length === 0} />\n      <Modal show={alert.show} onHide={closeAlert}>\n        <Modal.Header closeButton>\n          <Modal.Title>{alert.title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{alert.message}</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={closeAlert}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\nMainContainer.propTypes = {\n  preloadedRepos: PropTypes.object,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TopNav from \"./TopNav\";\nimport MainContainer from \"./MainContainer\";\n\nexport default function MainPage({ preloadedRepos }) {\n  return (\n    <div>\n      <TopNav />\n      <MainContainer preloadedRepos={preloadedRepos} />\n    </div>\n  );\n}\nMainPage.propTypes = {\n  preloadedRepos: PropTypes.object,\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Container, ProgressBar, Button } from \"react-bootstrap/\";\nimport \"./RepoPreloader.css\";\nimport stargazerLoader, { maxReposAllowed } from \"../utils/StargazerLoader\";\nimport MainPage from \"./MainPage\";\n\nexport default function RepoPreloader({ location }) {\n  const parseUrlParams = () => {\n    const searchParams = new URLSearchParams(location.search);\n    const result = [];\n    searchParams.forEach((value, key) => {\n      if (key === \"r\") {\n        const repo = value.split(\",\");\n        if (\n          result.length < maxReposAllowed &&\n          repo.length === 2 &&\n          result.find(\n            (iter) => iter.username === repo[0] && iter.repo === repo[1]\n          ) === undefined\n        ) {\n          result.push({\n            username: repo[0],\n            repo: repo[1],\n          });\n        }\n      }\n    });\n    return result;\n  };\n\n  const reposToPreload = useRef();\n  const currentlyLoadingIndex = useRef();\n\n  const [loadProgress, setLoadProgress] = useState(0);\n  const [finishedLoading, setFinishedLoading] = useState(false);\n  const [reposLoaded, setReposLoaded] = useState([]);\n  const [errors, setErrors] = useState([]);\n\n  const handleButtonClick = () => {\n    setErrors([]);\n  };\n\n  const getProgressBarVariant = () => {\n    if (finishedLoading && errors.length > 0) {\n      return \"warning\";\n    }\n\n    return \"success\";\n  };\n\n  const getSecondaryHeaderMessage = () => {\n    if (finishedLoading && errors.length > 0) {\n      return \"Error loading repos\";\n    }\n\n    if (reposToPreload.current === undefined) {\n      return \"\";\n    }\n\n    return (\n      reposToPreload.current[currentlyLoadingIndex.current].username +\n      \"/\" +\n      reposToPreload.current[currentlyLoadingIndex.current].repo\n    );\n  };\n\n  const loadStargazers = async () => {\n    const repoToPreload = reposToPreload.current[currentlyLoadingIndex.current];\n\n    try {\n      const stargazerData = await stargazerLoader.loadStargazers(\n        repoToPreload.username,\n        repoToPreload.repo,\n        null,\n        (progress) => setLoadProgress(progress),\n        () => false\n      );\n\n      setReposLoaded([...reposLoaded, stargazerData]);\n    } catch (error) {\n      setErrors([\n        ...errors,\n        { repoDetails: repoToPreload, message: error.message },\n      ]);\n    }\n\n    currentlyLoadingIndex.current = currentlyLoadingIndex.current + 1;\n  };\n\n  useEffect(() => {\n    reposToPreload.current = parseUrlParams();\n    if (reposToPreload.current.length > 0) {\n      currentlyLoadingIndex.current = 0;\n      loadStargazers();\n    } else {\n      setFinishedLoading(true);\n      setLoadProgress(100);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (reposLoaded.length > 0 || errors.length > 0) {\n      if (currentlyLoadingIndex.current < reposToPreload.current.length) {\n        loadStargazers();\n      } else {\n        setFinishedLoading(true);\n        setLoadProgress(100);\n      }\n    }\n  }, [reposLoaded, errors]);\n\n  return (\n    <div>\n      {finishedLoading === false || errors.length > 0 ? (\n        <Container className=\"RepoPreloader-topContainer\">\n          <h3>Loading Repos Data...</h3>\n          <h5>{getSecondaryHeaderMessage()}</h5>\n          <ProgressBar\n            className=\"RepoPreloader-ProgressBar-Reseting\"\n            now={loadProgress}\n            variant={getProgressBarVariant()}\n            animated\n          />\n          {errors.length > 0 ? (\n            <Container className=\"RepoPreloader-errorContainer\">\n              {errors.map((error, i) => (\n                <h6 key={i}>\n                  <b>\n                    Error loading {error.repoDetails.username}/\n                    {error.repoDetails.repo}:\n                  </b>{\" \"}\n                  {error.message}\n                </h6>\n              ))}\n              {finishedLoading ? (\n                <Button onClick={handleButtonClick}>Continue</Button>\n              ) : null}\n            </Container>\n          ) : null}\n        </Container>\n      ) : (\n        <MainPage preloadedRepos={reposLoaded} />\n      )}\n    </div>\n  );\n}\nRepoPreloader.propTypes = {\n  location: PropTypes.string,\n};\n","import React from \"react\";\nimport MainPage from \"./MainPage\";\nimport RepoPreloader from \"./RepoPreloader\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport initializeGoogleAnalytics from \"../utils/GATrack\";\n\nexport default function App() {\n  return (\n    <HashRouter>\n      <Route exact path=\"/\" component={MainPage} />\n      <Route path=\"/preload\" component={RepoPreloader} />\n    </HashRouter>\n  );\n}\n\ninitializeGoogleAnalytics();\n","import ReactGA from \"react-ga\";\n\nfunction initializeGoogleAnalytics() {\n  ReactGA.initialize(\"UA-104097715-1\");\n  ReactGA.pageview(window.location.pathname + window.location.search);\n}\n\nexport default initializeGoogleAnalytics;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}